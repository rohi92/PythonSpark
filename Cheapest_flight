class solution():
    def __init__(self,flights,source,dest,dict):
        self.source=source
        self.dest=dest
        self.flights=flights
        self.visited=[]
        self.path=[]
        self.cost=0
        dict = {}
        for i in self.flights:
            try:
                if len(dict[i[0]]) > 0:
                    l1 = [i[1], i[2]]
                    l2 = dict[i[0]]
                    l2.append(l1)
                    dict[i[0]] = l2
            except:
                dict[i[0]] = [[i[1], i[2]]]
        self.dict=dict

    def search(self):
        for k,v in self.dict.items():
            if k==self.source:
                for i in v:
                    self.path.append(k)
                    self.visited.append(k)
                    if i[0] not in self.visited:
                        self.visited.append(i[0])
                        self.path.append(i[0])
                        self.cost=self.cost+i[1]
                        self.dfs_graph(self.visited,self.dict[i[0]])
        return self.path,self.cost




    def dfs_graph(self,visited,graph_node):
        for i in graph_node:
            if i[0]==self.dest:
                self.path.append(i[0])
                self.cost=self.cost+i[1]
                return True
            else:

                if i[0] not in self.visited:
                    self.cost=self.cost+i[1]
                    self.path.append(i[0])
                    self.visited.append(i[0])
                    if self.dfs_graph(self.visited,self.dict[i[0]]):
                        return True


        return True
if __name__=="__main__":
    flights, source, dest, dict=[[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]],0,3,{}
    sol=solution(flights, source, dest, dict)
    print(sol.search())




















